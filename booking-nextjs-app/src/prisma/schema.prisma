generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  firstName        String
  lastName         String
  email            String    @unique
  emailVerified    DateTime?
  password         String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  defaultCountryId String?
  imageUrl         String?
  accounts         Account[]
  sessions         Session[]
  defaultCountry   Country?  @relation(fields: [defaultCountryId], references: [id])
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Flight {
  id            String          @default(uuid())
  fromAirportId String
  fromDatetime  DateTime
  toAirportId   String
  toDatetime    DateTime
  company       String
  flightNumber  String
  ticketClass   TicketClass     @default(ECONOMY)
  price         Float
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  fromAirport   Airport         @relation("Departure", fields: [fromAirportId], references: [id])
  toAirport     Airport         @relation("Arrival", fields: [toAirportId], references: [id])
  flightRoutes  FlightsRoutes[] @relation("flightToRoutes")

  @@id([id, fromDatetime])
  @@unique([id, fromDatetime], name: "Flight_pkey")
  @@index([fromDatetime])
  @@map("Flight")
}

model Airport {
  id          String   @id @default(uuid())
  name        String
  code        String   @unique
  cityId      String
  city        City     @relation(fields: [cityId], references: [id])
  flightsFrom Flight[] @relation("Departure")
  flightsTo   Flight[] @relation("Arrival")
}

model City {
  id        String    @id @default(uuid())
  name      String    @unique
  countryId String?
  airports  Airport[]
  country   Country?  @relation(fields: [countryId], references: [id])
}

model Country {
  id     String @id @default(uuid())
  name   String @unique
  cities City[]
  users  User[]
}

model Route {
  id           String          @id @default(uuid())
  hash         String          @unique
  carts        Cart[]
  flightRoutes FlightsRoutes[]
}

model FlightsRoutes {
  id         String   @id @default(uuid())
  sequenceId Int
  flightId   String
  flightDate DateTime
  routeId    String
  flight     Flight   @relation("flightToRoutes", fields: [flightId, flightDate], references: [id, fromDatetime])
  route      Route    @relation(fields: [routeId], references: [id])

  @@unique([sequenceId, routeId])
}

model Cart {
  id      String @id @default(uuid())
  routeId String
  route   Route  @relation(fields: [routeId], references: [id])
}

model Reservation {
  id        String   @id @default(uuid())
  data      Json
  status    Status   @default(IN_PROCESSING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  IN_PROCESSING
  COMPLETE
}

enum TicketClass {
  ECONOMY
  COMFORT
  BUSINESS
  FIRST
}
