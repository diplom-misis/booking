generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Flight {
  id            String   @id @default(uuid())
  fromAirport   Airport  @relation(name: "Departure", fields: [fromAirportId], references: [id])
  fromAirportId String
  fromDatetime  DateTime
  toAirport     Airport  @relation(name: "Arrival", fields: [toAirportId], references: [id])
  toAirportId   String
  toDatetime    DateTime
  company       String
  price         Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  flightRoutes FlightsRoutes[]
}

model Airport {
  id       String   @id @default(uuid())
  name     String
  code     String   @unique
  cityId   String
  city     City     @relation(fields: [cityId], references: [id])
  country  String

  flightsFrom Flight[] @relation(name: "Departure")
  flightsTo   Flight[] @relation(name: "Arrival")
}

model City {
  id      String    @id @default(uuid())
  name    String
  Airport Airport[]
}

model Route {
  id           String          @id @default(uuid())
  flightRoutes FlightsRoutes[]
  carts        Cart[]
}

model FlightsRoutes {
  id         String @id @default(uuid())
  sequenceId Int
  flight     Flight @relation(fields: [flightId], references: [id])
  flightId   String
  route      Route  @relation(fields: [routeId], references: [id])
  routeId    String

  @@unique([sequenceId, routeId])
}

model Cart {
  id      String @id @default(uuid())
  route   Route  @relation(fields: [routeId], references: [id])
  routeId String
}

model Reservation {
  id        String   @id @default(uuid())
  data      Json
  status    Status   @default(IN_PROCESSING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  IN_PROCESSING
  COMPLETE
}